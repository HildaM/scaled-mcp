// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/mcppb/jsonrpc.proto

package mcppb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WrappedRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	IsAsk                 bool                   `protobuf:"varint,1,opt,name=is_ask,json=isAsk,proto3" json:"is_ask,omitempty"`
	RespondToConnectionId string                 `protobuf:"bytes,2,opt,name=respond_to_connection_id,json=respondToConnectionId,proto3" json:"respond_to_connection_id,omitempty"`
	Request               *JsonRpcRequest        `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	AuthInfo              []byte                 `protobuf:"bytes,4,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	TraceId               string                 `protobuf:"bytes,5,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *WrappedRequest) Reset() {
	*x = WrappedRequest{}
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WrappedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrappedRequest) ProtoMessage() {}

func (x *WrappedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrappedRequest.ProtoReflect.Descriptor instead.
func (*WrappedRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcppb_jsonrpc_proto_rawDescGZIP(), []int{0}
}

func (x *WrappedRequest) GetIsAsk() bool {
	if x != nil {
		return x.IsAsk
	}
	return false
}

func (x *WrappedRequest) GetRespondToConnectionId() string {
	if x != nil {
		return x.RespondToConnectionId
	}
	return ""
}

func (x *WrappedRequest) GetRequest() *JsonRpcRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *WrappedRequest) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *WrappedRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

// JsonRpcRequest represents a JSON-RPC request message
type JsonRpcRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Jsonrpc string                 `protobuf:"bytes,1,opt,name=jsonrpc,proto3" json:"jsonrpc,omitempty"` // Version of the JSON-RPC protocol, typically "2.0"
	// Types that are valid to be assigned to Id:
	//
	//	*JsonRpcRequest_IntId
	//	*JsonRpcRequest_StringId
	//	*JsonRpcRequest_NullId
	Id            isJsonRpcRequest_Id `protobuf_oneof:"id"`
	Method        string              `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`                           // Method to invoke
	ParamsJson    string              `protobuf:"bytes,6,opt,name=params_json,json=paramsJson,proto3" json:"params_json,omitempty"` // Parameters for the method as JSON string
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JsonRpcRequest) Reset() {
	*x = JsonRpcRequest{}
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonRpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonRpcRequest) ProtoMessage() {}

func (x *JsonRpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonRpcRequest.ProtoReflect.Descriptor instead.
func (*JsonRpcRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcppb_jsonrpc_proto_rawDescGZIP(), []int{1}
}

func (x *JsonRpcRequest) GetJsonrpc() string {
	if x != nil {
		return x.Jsonrpc
	}
	return ""
}

func (x *JsonRpcRequest) GetId() isJsonRpcRequest_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *JsonRpcRequest) GetIntId() int64 {
	if x != nil {
		if x, ok := x.Id.(*JsonRpcRequest_IntId); ok {
			return x.IntId
		}
	}
	return 0
}

func (x *JsonRpcRequest) GetStringId() string {
	if x != nil {
		if x, ok := x.Id.(*JsonRpcRequest_StringId); ok {
			return x.StringId
		}
	}
	return ""
}

func (x *JsonRpcRequest) GetNullId() bool {
	if x != nil {
		if x, ok := x.Id.(*JsonRpcRequest_NullId); ok {
			return x.NullId
		}
	}
	return false
}

func (x *JsonRpcRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *JsonRpcRequest) GetParamsJson() string {
	if x != nil {
		return x.ParamsJson
	}
	return ""
}

type isJsonRpcRequest_Id interface {
	isJsonRpcRequest_Id()
}

type JsonRpcRequest_IntId struct {
	IntId int64 `protobuf:"varint,2,opt,name=int_id,json=intId,proto3,oneof"`
}

type JsonRpcRequest_StringId struct {
	StringId string `protobuf:"bytes,3,opt,name=string_id,json=stringId,proto3,oneof"`
}

type JsonRpcRequest_NullId struct {
	NullId bool `protobuf:"varint,4,opt,name=null_id,json=nullId,proto3,oneof"` // For notifications (no ID)
}

func (*JsonRpcRequest_IntId) isJsonRpcRequest_Id() {}

func (*JsonRpcRequest_StringId) isJsonRpcRequest_Id() {}

func (*JsonRpcRequest_NullId) isJsonRpcRequest_Id() {}

// JsonRpcResponse represents a JSON-RPC response message
type JsonRpcResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Jsonrpc string                 `protobuf:"bytes,1,opt,name=jsonrpc,proto3" json:"jsonrpc,omitempty"` // Version of the JSON-RPC protocol, typically "2.0"
	// Types that are valid to be assigned to Id:
	//
	//	*JsonRpcResponse_IntId
	//	*JsonRpcResponse_StringId
	//	*JsonRpcResponse_NullId
	Id isJsonRpcResponse_Id `protobuf_oneof:"id"`
	// Types that are valid to be assigned to Response:
	//
	//	*JsonRpcResponse_ResultJson
	//	*JsonRpcResponse_Error
	Response      isJsonRpcResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JsonRpcResponse) Reset() {
	*x = JsonRpcResponse{}
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonRpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonRpcResponse) ProtoMessage() {}

func (x *JsonRpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonRpcResponse.ProtoReflect.Descriptor instead.
func (*JsonRpcResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcppb_jsonrpc_proto_rawDescGZIP(), []int{2}
}

func (x *JsonRpcResponse) GetJsonrpc() string {
	if x != nil {
		return x.Jsonrpc
	}
	return ""
}

func (x *JsonRpcResponse) GetId() isJsonRpcResponse_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *JsonRpcResponse) GetIntId() int64 {
	if x != nil {
		if x, ok := x.Id.(*JsonRpcResponse_IntId); ok {
			return x.IntId
		}
	}
	return 0
}

func (x *JsonRpcResponse) GetStringId() string {
	if x != nil {
		if x, ok := x.Id.(*JsonRpcResponse_StringId); ok {
			return x.StringId
		}
	}
	return ""
}

func (x *JsonRpcResponse) GetNullId() bool {
	if x != nil {
		if x, ok := x.Id.(*JsonRpcResponse_NullId); ok {
			return x.NullId
		}
	}
	return false
}

func (x *JsonRpcResponse) GetResponse() isJsonRpcResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *JsonRpcResponse) GetResultJson() string {
	if x != nil {
		if x, ok := x.Response.(*JsonRpcResponse_ResultJson); ok {
			return x.ResultJson
		}
	}
	return ""
}

func (x *JsonRpcResponse) GetError() *JsonRpcError {
	if x != nil {
		if x, ok := x.Response.(*JsonRpcResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isJsonRpcResponse_Id interface {
	isJsonRpcResponse_Id()
}

type JsonRpcResponse_IntId struct {
	IntId int64 `protobuf:"varint,2,opt,name=int_id,json=intId,proto3,oneof"`
}

type JsonRpcResponse_StringId struct {
	StringId string `protobuf:"bytes,3,opt,name=string_id,json=stringId,proto3,oneof"`
}

type JsonRpcResponse_NullId struct {
	NullId bool `protobuf:"varint,4,opt,name=null_id,json=nullId,proto3,oneof"` // Should be null for notifications
}

func (*JsonRpcResponse_IntId) isJsonRpcResponse_Id() {}

func (*JsonRpcResponse_StringId) isJsonRpcResponse_Id() {}

func (*JsonRpcResponse_NullId) isJsonRpcResponse_Id() {}

type isJsonRpcResponse_Response interface {
	isJsonRpcResponse_Response()
}

type JsonRpcResponse_ResultJson struct {
	ResultJson string `protobuf:"bytes,5,opt,name=result_json,json=resultJson,proto3,oneof"` // Result of the method invocation as JSON string
}

type JsonRpcResponse_Error struct {
	Error *JsonRpcError `protobuf:"bytes,6,opt,name=error,proto3,oneof"` // Error object if the invocation failed
}

func (*JsonRpcResponse_ResultJson) isJsonRpcResponse_Response() {}

func (*JsonRpcResponse_Error) isJsonRpcResponse_Response() {}

// JsonRpcError represents a JSON-RPC error object
type JsonRpcError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                        // Error code
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                   // Error message
	DataJson      string                 `protobuf:"bytes,3,opt,name=data_json,json=dataJson,proto3" json:"data_json,omitempty"` // Additional error data as JSON string (optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JsonRpcError) Reset() {
	*x = JsonRpcError{}
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonRpcError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonRpcError) ProtoMessage() {}

func (x *JsonRpcError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonRpcError.ProtoReflect.Descriptor instead.
func (*JsonRpcError) Descriptor() ([]byte, []int) {
	return file_proto_mcppb_jsonrpc_proto_rawDescGZIP(), []int{3}
}

func (x *JsonRpcError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *JsonRpcError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JsonRpcError) GetDataJson() string {
	if x != nil {
		return x.DataJson
	}
	return ""
}

// JsonRpcBatchRequest represents a batch of JSON-RPC requests
type JsonRpcBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      []*JsonRpcRequest      `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JsonRpcBatchRequest) Reset() {
	*x = JsonRpcBatchRequest{}
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonRpcBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonRpcBatchRequest) ProtoMessage() {}

func (x *JsonRpcBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonRpcBatchRequest.ProtoReflect.Descriptor instead.
func (*JsonRpcBatchRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcppb_jsonrpc_proto_rawDescGZIP(), []int{4}
}

func (x *JsonRpcBatchRequest) GetRequests() []*JsonRpcRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// JsonRpcBatchResponse represents a batch of JSON-RPC responses
type JsonRpcBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Responses     []*JsonRpcResponse     `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JsonRpcBatchResponse) Reset() {
	*x = JsonRpcBatchResponse{}
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonRpcBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonRpcBatchResponse) ProtoMessage() {}

func (x *JsonRpcBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonRpcBatchResponse.ProtoReflect.Descriptor instead.
func (*JsonRpcBatchResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcppb_jsonrpc_proto_rawDescGZIP(), []int{5}
}

func (x *JsonRpcBatchResponse) GetResponses() []*JsonRpcResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

// McpSessionRequest is a message sent to a session actor to process a JSON-RPC request
type McpSessionRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to Request:
	//
	//	*McpSessionRequest_SingleRequest
	//	*McpSessionRequest_BatchRequest
	Request       isMcpSessionRequest_Request `protobuf_oneof:"request"`
	NeedsResponse bool                        `protobuf:"varint,4,opt,name=needs_response,json=needsResponse,proto3" json:"needs_response,omitempty"` // Whether a response is expected
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpSessionRequest) Reset() {
	*x = McpSessionRequest{}
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpSessionRequest) ProtoMessage() {}

func (x *McpSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpSessionRequest.ProtoReflect.Descriptor instead.
func (*McpSessionRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcppb_jsonrpc_proto_rawDescGZIP(), []int{6}
}

func (x *McpSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *McpSessionRequest) GetRequest() isMcpSessionRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *McpSessionRequest) GetSingleRequest() *JsonRpcRequest {
	if x != nil {
		if x, ok := x.Request.(*McpSessionRequest_SingleRequest); ok {
			return x.SingleRequest
		}
	}
	return nil
}

func (x *McpSessionRequest) GetBatchRequest() *JsonRpcBatchRequest {
	if x != nil {
		if x, ok := x.Request.(*McpSessionRequest_BatchRequest); ok {
			return x.BatchRequest
		}
	}
	return nil
}

func (x *McpSessionRequest) GetNeedsResponse() bool {
	if x != nil {
		return x.NeedsResponse
	}
	return false
}

type isMcpSessionRequest_Request interface {
	isMcpSessionRequest_Request()
}

type McpSessionRequest_SingleRequest struct {
	SingleRequest *JsonRpcRequest `protobuf:"bytes,2,opt,name=single_request,json=singleRequest,proto3,oneof"`
}

type McpSessionRequest_BatchRequest struct {
	BatchRequest *JsonRpcBatchRequest `protobuf:"bytes,3,opt,name=batch_request,json=batchRequest,proto3,oneof"`
}

func (*McpSessionRequest_SingleRequest) isMcpSessionRequest_Request() {}

func (*McpSessionRequest_BatchRequest) isMcpSessionRequest_Request() {}

// McpSessionResponse is a message sent from a session actor with a JSON-RPC response
type McpSessionResponse struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*McpSessionResponse_SingleResponse
	//	*McpSessionResponse_BatchResponse
	Response      isMcpSessionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpSessionResponse) Reset() {
	*x = McpSessionResponse{}
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpSessionResponse) ProtoMessage() {}

func (x *McpSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpSessionResponse.ProtoReflect.Descriptor instead.
func (*McpSessionResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcppb_jsonrpc_proto_rawDescGZIP(), []int{7}
}

func (x *McpSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *McpSessionResponse) GetResponse() isMcpSessionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *McpSessionResponse) GetSingleResponse() *JsonRpcResponse {
	if x != nil {
		if x, ok := x.Response.(*McpSessionResponse_SingleResponse); ok {
			return x.SingleResponse
		}
	}
	return nil
}

func (x *McpSessionResponse) GetBatchResponse() *JsonRpcBatchResponse {
	if x != nil {
		if x, ok := x.Response.(*McpSessionResponse_BatchResponse); ok {
			return x.BatchResponse
		}
	}
	return nil
}

type isMcpSessionResponse_Response interface {
	isMcpSessionResponse_Response()
}

type McpSessionResponse_SingleResponse struct {
	SingleResponse *JsonRpcResponse `protobuf:"bytes,2,opt,name=single_response,json=singleResponse,proto3,oneof"`
}

type McpSessionResponse_BatchResponse struct {
	BatchResponse *JsonRpcBatchResponse `protobuf:"bytes,3,opt,name=batch_response,json=batchResponse,proto3,oneof"`
}

func (*McpSessionResponse_SingleResponse) isMcpSessionResponse_Response() {}

func (*McpSessionResponse_BatchResponse) isMcpSessionResponse_Response() {}

// McpSessionInitialize is used to initialize an MCP session actor
type McpSessionInitialize struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SessionId              string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PreferSse              bool                   `protobuf:"varint,2,opt,name=prefer_sse,json=preferSse,proto3" json:"prefer_sse,omitempty"`                                         // Whether to prefer SSE over JSON when possible
	ServerCapabilitiesJson string                 `protobuf:"bytes,3,opt,name=server_capabilities_json,json=serverCapabilitiesJson,proto3" json:"server_capabilities_json,omitempty"` // Server capabilities as JSON string
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *McpSessionInitialize) Reset() {
	*x = McpSessionInitialize{}
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpSessionInitialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpSessionInitialize) ProtoMessage() {}

func (x *McpSessionInitialize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcppb_jsonrpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpSessionInitialize.ProtoReflect.Descriptor instead.
func (*McpSessionInitialize) Descriptor() ([]byte, []int) {
	return file_proto_mcppb_jsonrpc_proto_rawDescGZIP(), []int{8}
}

func (x *McpSessionInitialize) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *McpSessionInitialize) GetPreferSse() bool {
	if x != nil {
		return x.PreferSse
	}
	return false
}

func (x *McpSessionInitialize) GetServerCapabilitiesJson() string {
	if x != nil {
		return x.ServerCapabilitiesJson
	}
	return ""
}

var File_proto_mcppb_jsonrpc_proto protoreflect.FileDescriptor

const file_proto_mcppb_jsonrpc_proto_rawDesc = "" +
	"\n" +
	"\x19proto/mcppb/jsonrpc.proto\x12\x05mcppb\x1a\x1cgoogle/protobuf/struct.proto\"\xc9\x01\n" +
	"\x0eWrappedRequest\x12\x15\n" +
	"\x06is_ask\x18\x01 \x01(\bR\x05isAsk\x127\n" +
	"\x18respond_to_connection_id\x18\x02 \x01(\tR\x15respondToConnectionId\x12/\n" +
	"\arequest\x18\x03 \x01(\v2\x15.mcppb.JsonRpcRequestR\arequest\x12\x1b\n" +
	"\tauth_info\x18\x04 \x01(\fR\bauthInfo\x12\x19\n" +
	"\btrace_id\x18\x05 \x01(\tR\atraceId\"\xbc\x01\n" +
	"\x0eJsonRpcRequest\x12\x18\n" +
	"\ajsonrpc\x18\x01 \x01(\tR\ajsonrpc\x12\x17\n" +
	"\x06int_id\x18\x02 \x01(\x03H\x00R\x05intId\x12\x1d\n" +
	"\tstring_id\x18\x03 \x01(\tH\x00R\bstringId\x12\x19\n" +
	"\anull_id\x18\x04 \x01(\bH\x00R\x06nullId\x12\x16\n" +
	"\x06method\x18\x05 \x01(\tR\x06method\x12\x1f\n" +
	"\vparams_json\x18\x06 \x01(\tR\n" +
	"paramsJsonB\x04\n" +
	"\x02id\"\xe0\x01\n" +
	"\x0fJsonRpcResponse\x12\x18\n" +
	"\ajsonrpc\x18\x01 \x01(\tR\ajsonrpc\x12\x17\n" +
	"\x06int_id\x18\x02 \x01(\x03H\x00R\x05intId\x12\x1d\n" +
	"\tstring_id\x18\x03 \x01(\tH\x00R\bstringId\x12\x19\n" +
	"\anull_id\x18\x04 \x01(\bH\x00R\x06nullId\x12!\n" +
	"\vresult_json\x18\x05 \x01(\tH\x01R\n" +
	"resultJson\x12+\n" +
	"\x05error\x18\x06 \x01(\v2\x13.mcppb.JsonRpcErrorH\x01R\x05errorB\x04\n" +
	"\x02idB\n" +
	"\n" +
	"\bresponse\"Y\n" +
	"\fJsonRpcError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1b\n" +
	"\tdata_json\x18\x03 \x01(\tR\bdataJson\"H\n" +
	"\x13JsonRpcBatchRequest\x121\n" +
	"\brequests\x18\x01 \x03(\v2\x15.mcppb.JsonRpcRequestR\brequests\"L\n" +
	"\x14JsonRpcBatchResponse\x124\n" +
	"\tresponses\x18\x01 \x03(\v2\x16.mcppb.JsonRpcResponseR\tresponses\"\xe7\x01\n" +
	"\x11McpSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12>\n" +
	"\x0esingle_request\x18\x02 \x01(\v2\x15.mcppb.JsonRpcRequestH\x00R\rsingleRequest\x12A\n" +
	"\rbatch_request\x18\x03 \x01(\v2\x1a.mcppb.JsonRpcBatchRequestH\x00R\fbatchRequest\x12%\n" +
	"\x0eneeds_response\x18\x04 \x01(\bR\rneedsResponseB\t\n" +
	"\arequest\"\xc8\x01\n" +
	"\x12McpSessionResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12A\n" +
	"\x0fsingle_response\x18\x02 \x01(\v2\x16.mcppb.JsonRpcResponseH\x00R\x0esingleResponse\x12D\n" +
	"\x0ebatch_response\x18\x03 \x01(\v2\x1b.mcppb.JsonRpcBatchResponseH\x00R\rbatchResponseB\n" +
	"\n" +
	"\bresponse\"\x8e\x01\n" +
	"\x14McpSessionInitialize\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x1d\n" +
	"\n" +
	"prefer_sse\x18\x02 \x01(\bR\tpreferSse\x128\n" +
	"\x18server_capabilities_json\x18\x03 \x01(\tR\x16serverCapabilitiesJsonB.Z,github.com/traego/scaled-mcp/pkg/proto/mcppbb\x06proto3"

var (
	file_proto_mcppb_jsonrpc_proto_rawDescOnce sync.Once
	file_proto_mcppb_jsonrpc_proto_rawDescData []byte
)

func file_proto_mcppb_jsonrpc_proto_rawDescGZIP() []byte {
	file_proto_mcppb_jsonrpc_proto_rawDescOnce.Do(func() {
		file_proto_mcppb_jsonrpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_mcppb_jsonrpc_proto_rawDesc), len(file_proto_mcppb_jsonrpc_proto_rawDesc)))
	})
	return file_proto_mcppb_jsonrpc_proto_rawDescData
}

var file_proto_mcppb_jsonrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_mcppb_jsonrpc_proto_goTypes = []any{
	(*WrappedRequest)(nil),       // 0: mcppb.WrappedRequest
	(*JsonRpcRequest)(nil),       // 1: mcppb.JsonRpcRequest
	(*JsonRpcResponse)(nil),      // 2: mcppb.JsonRpcResponse
	(*JsonRpcError)(nil),         // 3: mcppb.JsonRpcError
	(*JsonRpcBatchRequest)(nil),  // 4: mcppb.JsonRpcBatchRequest
	(*JsonRpcBatchResponse)(nil), // 5: mcppb.JsonRpcBatchResponse
	(*McpSessionRequest)(nil),    // 6: mcppb.McpSessionRequest
	(*McpSessionResponse)(nil),   // 7: mcppb.McpSessionResponse
	(*McpSessionInitialize)(nil), // 8: mcppb.McpSessionInitialize
}
var file_proto_mcppb_jsonrpc_proto_depIdxs = []int32{
	1, // 0: mcppb.WrappedRequest.request:type_name -> mcppb.JsonRpcRequest
	3, // 1: mcppb.JsonRpcResponse.error:type_name -> mcppb.JsonRpcError
	1, // 2: mcppb.JsonRpcBatchRequest.requests:type_name -> mcppb.JsonRpcRequest
	2, // 3: mcppb.JsonRpcBatchResponse.responses:type_name -> mcppb.JsonRpcResponse
	1, // 4: mcppb.McpSessionRequest.single_request:type_name -> mcppb.JsonRpcRequest
	4, // 5: mcppb.McpSessionRequest.batch_request:type_name -> mcppb.JsonRpcBatchRequest
	2, // 6: mcppb.McpSessionResponse.single_response:type_name -> mcppb.JsonRpcResponse
	5, // 7: mcppb.McpSessionResponse.batch_response:type_name -> mcppb.JsonRpcBatchResponse
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_proto_mcppb_jsonrpc_proto_init() }
func file_proto_mcppb_jsonrpc_proto_init() {
	if File_proto_mcppb_jsonrpc_proto != nil {
		return
	}
	file_proto_mcppb_jsonrpc_proto_msgTypes[1].OneofWrappers = []any{
		(*JsonRpcRequest_IntId)(nil),
		(*JsonRpcRequest_StringId)(nil),
		(*JsonRpcRequest_NullId)(nil),
	}
	file_proto_mcppb_jsonrpc_proto_msgTypes[2].OneofWrappers = []any{
		(*JsonRpcResponse_IntId)(nil),
		(*JsonRpcResponse_StringId)(nil),
		(*JsonRpcResponse_NullId)(nil),
		(*JsonRpcResponse_ResultJson)(nil),
		(*JsonRpcResponse_Error)(nil),
	}
	file_proto_mcppb_jsonrpc_proto_msgTypes[6].OneofWrappers = []any{
		(*McpSessionRequest_SingleRequest)(nil),
		(*McpSessionRequest_BatchRequest)(nil),
	}
	file_proto_mcppb_jsonrpc_proto_msgTypes[7].OneofWrappers = []any{
		(*McpSessionResponse_SingleResponse)(nil),
		(*McpSessionResponse_BatchResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_mcppb_jsonrpc_proto_rawDesc), len(file_proto_mcppb_jsonrpc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_mcppb_jsonrpc_proto_goTypes,
		DependencyIndexes: file_proto_mcppb_jsonrpc_proto_depIdxs,
		MessageInfos:      file_proto_mcppb_jsonrpc_proto_msgTypes,
	}.Build()
	File_proto_mcppb_jsonrpc_proto = out.File
	file_proto_mcppb_jsonrpc_proto_goTypes = nil
	file_proto_mcppb_jsonrpc_proto_depIdxs = nil
}
